using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Media;

namespace GameEngine.Scene
{
    public sealed class Scene1 : Scene
    {        
        private Scene1()
        {

            /////////////////////////////////////////////////////////////////////////////////
            //                                  PROPERTIES                                 //
            /////////////////////////////////////////////////////////////////////////////////

            this.Width = 32;
            this.Height = 18;

            this.Camera = new Camera(new Vector2(15, 9),1f);

            this.Musics = new Dictionary<string, Sound.Music>() 
            {
                { "Test", new Sound.Music("Music/Test/test")}
            };

            this.map = new Map(
                new char[,,]
                {
                    {
                        { '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '.', '.', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '_', '_', '_', '.', '.', '.', '.', '.', '.', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '.', '.', '.', '.', '.', '_', '_', '_', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '_', '_', '_', '.', '.', '.', '_', '_', '_', '.', '.', '.', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '_', '_' },
                        { '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_' },
                        { '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_' }
                    }
                },
                new Dictionary<char, Tile>[]
                {
                    new Dictionary<char, Tile>
                    {
                        {'_', new Tile() { sprites = new Graphics.Sprite("Texture2D/Test/TileTest") } }
                    }
                },
                new char[,]
                {
                    { '.', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.', '.', '-', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '-', '-', '-', '.', '.', '.', '.', '.', '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.', '.', '.', '.', '.', '-', '-', '-', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '-', '-', '-', '.', '.', '.', '-', '-', '-', '.', '.', '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '-', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '|', '.' },
                    { '.', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '.' },
                    { '.', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '.' }
                },
                Width,
                Height
            );

            this.Content = new LinkedList<GameObject>();

            this.Content.AddLast(
                new Player(
                    new Vector2(4, 4),
                    new Vector2(0, 0), new Vector2(0, 12),
                    new Dictionary<string, Graphics.Animation>()
                    {
                        { "Default", new Graphics.Animation("Texture2D/Test/ball", 2, true) },
                    },
                    //new Collision.RB_Circle(0.5f),
                    new Collision.RB_Square(1,1),
                    new Dictionary<string, Sound.Sound>()
                    {
                        {"test", new Sound.Sound("SoundEffect/Test/test",false)},
                        {"test2", new Sound.Sound("SoundEffect/Test/test2",false)}
                    }
                )
            );

            this.Content.AddLast(
                new Obstacle(new Vector2(8, 8), new Vector2(0, 0), new Vector2(0, 0), "Texture2D/Test/SwordV1", new Collision.RB_Square(1,1))
            );

            this.Ui = new LinkedList<UI.Component>(); 

            static void test(GameTime gameTime) { System.Diagnostics.Debug.WriteLine("AAAAAAAAAAAAAAAAAAAAA"); }
            Ui.AddLast( new UI.Button("Texture2D/Test/SwordV1", new Vector2(0.5f,0.5f), Game1.BaseFont, "AAA", Color.Red, new Sound.Sound("SoundEffect/Test/test", false)) { OnClick = new Action<GameTime>(test)} );

            this.TriggerBoxes = new LinkedList<Collision.TriggerBox>();
            TriggerBoxes.AddLast(new Collision.TriggerBox(new Vector2(1, 8), new Vector2(3, 11)) { OnCollisionPlayer = new Action<GameTime>(test) } );
            static void zooming(GameTime gameTime) { Instance.Camera.zoom += 0.001f; }
            static void dezooming(GameTime gameTime) { Tools.CustomMath.Lerp(Instance.Camera.zoom, 1, 10f * (float)gameTime.ElapsedGameTime.TotalSeconds); } //TODO : FIND A WAY TO DO OVER TIME
            TriggerBoxes.AddLast(new Collision.TriggerBox(new Vector2(17, 1), new Vector2(30, 16)) { OnCollisionPlayer = new Action<GameTime>(zooming), OnExitPlayer = new Action<GameTime>(dezooming) } );
        }

        /////////////////////////////////////////////////////////////////////////////////
        //                                 CONSTRUCTOR                                 //
        /////////////////////////////////////////////////////////////////////////////////

        private static Scene1 instance = null;
        public static Scene1 Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new Scene1();
                }
                return instance;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////
        //                                   METHODS                                   //
        /////////////////////////////////////////////////////////////////////////////////

        public static void Play()
        {
            Game1.isMouseVisible = false;
            SceneManager.Load(Scene1.Instance);
            Instance.Musics["Test"].Play();
        }

        public override void Kill()
        {
            instance = null;
        }
        public override void Update(GameTime gameTime)
        {
            base.Update(gameTime);
        }
        public override void Draw(SpriteBatch spriteBatch, GameTime gameTime)
        {
            base.Draw(spriteBatch, gameTime);
        }
    }
}

